# -*- coding: utf-8 -*-
"""LVADSUSR114_ShaikSharezHussain_lab1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ysay04gs4dD4jVX-lYjSFntPjLWjPePu
"""

#1.5
#1
import pandas as pd
import numpy as np
df=pd.read_csv('/content/expenses.csv')
df

df.info()
df.describe()

df.isnull().sum()

df.dropna()

#outliers
import matplotlib.pyplot as plt
import seaborn as sns
sns.boxplot(data=df)
plt.title("Anomly")
plt.show()

import matplotlib.pyplot as plt
import seaborn as sns
sns.boxplot(data=df['charges'])
plt.title("Anomly")
plt.show()

import matplotlib.pyplot as plt
import seaborn as sns
sns.scatterplot(data=df['bmi'])
plt.show()

import matplotlib.pyplot as plt
import seaborn as sns
sns.scatterplot(data=df)
plt.show()

#2
#Encoding Categorical Data
from sklearn.preprocessing import LabelEncoder
l=LabelEncoder()
df['smoker']=l.fit_transform(df['smoker'])
df['sex']=l.fit_transform(df['sex'])
df['region']=l.fit_transform(df['region'])

df

#3
#x=df.drop([['region','bmi','sex'	,'age']],axis=1)
x=df['smoker']
y=df['charges']

#4
#30% test Data and 70% Training Data
from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.3,random_state=0)

#5
from sklearn.linear_model import LinearRegression
model=LinearRegression()
model.fit(x_train,y_train)
out=model.predict([x_test])
print(out)

#Mean Squared Error is a very important part of the model evaluation as the mse is used to find the error in the predited value and the actual alue..
#With The help of MSE The bias will be reduced to a big extent and also helps in increasing the accuracy

#Cost function also helps in balancing the Train and test data.
#Learning Rate eta is useful as the weight of the training data or test data is determined using the learning rate.. The learning Rate Generally is 0.6
#Derivatives And Partial Derivatives helps in the optimization of the model.The Derivatives help in seeing the balance between the weights and biases

#6
from sklearn.metrics import accuracy_score,mean_squared_error,precision_score
#accuracy
vAR_model_accuracy = accuracy_score(out,y_test)
#mse
vAR_model_mse = mean_squared_error(out,y_test)
#Precision
vAR_model_prec = precision_score(out,y_test)
print(vAR_model_accuracy)
print(var_model_mse)
print(vAR_model_prec)