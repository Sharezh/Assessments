# -*- coding: utf-8 -*-
"""LVADSUSR114_ShaikSharezHussain_lab2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fwQoTXG2qv9deISeqiOA90of3heiKZ10
"""

#2.5
#1
import pandas as pd
import numpy as np
df=pd.read_csv('/content/booking.csv')
df

df.info()
df.describe()

df.isnull().sum()

df.dropna()

#outliers
import matplotlib.pyplot as plt
import seaborn as sns
sns.boxplot(data=df)
plt.title("Anomly")
plt.show()

import matplotlib.pyplot as plt
import seaborn as sns
sns.boxplot(data=df['average price'])
plt.title("Anomly")
plt.show()

import matplotlib.pyplot as plt
import seaborn as sns
sns.scatterplot(data=df)
plt.title("Anomly")
plt.show()

#2
#Encoding Categorical Data
from sklearn.preprocessing import LabelEncoder
l=LabelEncoder()
df['room type']=l.fit_transform(df['room type'])
df['market segment type']=l.fit_transform(df['market segment type'])

#3
#x=df.drop([['Booking_ID','number of adults','number of children',	'number of weekend nights',	'number of week nights',	'type of meal','car parking space','lead time','repeated'	,'P-C'	,'P-not-C'	,'special requests'	,'date of reservation','booking status']],axis=1)
x=df['room type']
y=df['booking status']

#4
#30% test Data and 70% Training Data
from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.3,random_state=0)

#5
#Decision Tree
from sklearn.tree import DecisionTreeClassifier
model=DecisionTreeClassifier()
model.fit([x_train],[y_train])
out=model.predict([x_test])
print(out)

#Sigmoid Function helps to convert predictions to probabilities. The Predictions are Very much the probabilities of the values
#if the probabilities are nearer to the actual output then the bias is less. Sigmoid Function helps to assess the error and increases Accuracy

#6
from sklearn.metrics import accuracy_score,f1_score,precision_score
#accuracy
vAR_model_accuracy = accuracy_score(out,y_test)
#f1_score
vAR_model_f1 = f1_score(out,y_test)
#Precision
vAR_model_prec = precision_score(out,y_test)
print(vAR_model_accuracy)
print(var_model_f1)
print(vAR_model_prec)