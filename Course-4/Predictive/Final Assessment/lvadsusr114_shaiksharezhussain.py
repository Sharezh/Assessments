# -*- coding: utf-8 -*-
"""LVADSUSR114_ShaikSharezHussain.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-hFer3zf1gWzZjbzXKS0pF6I5-Jm99QB
"""

#1
#Read Data
import pandas as pd
import numpy as np
df=pd.read_csv('/content/loan_approval.csv')
df

#2
#Data Pre-Processing
df.isnull().sum()

df.dropna()
#to remove duplicates which is not needed here as there are no null values

df.fillna(df.mean())
#to fill missing values with mean which is also not required here as there are no NA values

#Outliers
import matplotlib.pyplot as plt
plt.boxplot(df[' loan_amount'])
plt.boxplot(df[' commercial_assets_value'])
plt.show()

#removing Outliers
Q1 = np.percentile(df, 25, axis=0)
Q3 = np.percentile(df, 75, axis=0)
Q1 = np.percentile(df, 25, axis=0)
Q3 = np.percentile(df, 75, axis=0)
IQR = Q3 - Q1
lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR
outliers_lower = (df < lower_bound).any(axis=1)
outliers_upper = (df > upper_bound).any(axis=1)
outliers = outliers_lower | outliers_upper
df1 = df[~outliers]

#3
#Exploratory Data Analysis
df.info()

df.describe()

df.shape

df.head(5)

df.corr()

df

#4
#Model Training and Tesing
from sklearn.preprocessing import LabelEncoder
lab=LabelEncoder()
df[' education']=lab.fit_transform(df[' education'])
df[' self_employed']=lab.fit_transform(df[' self_employed'])
df[' loan_status']=lab.fit_transform(df[' loan_status'])

#feature selection
import seaborn as sns
sns.heatmap(df.corr())

x=df[[' education',' no_of_dependents',' self_employed',' income_annum',' loan_amount',' cibil_score',' residential_assets_value',' commercial_assets_value',' luxury_assets_value',' bank_asset_value']]
y=df[' loan_status']

#split dataset
from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.3)

#model train and test
from sklearn.ensemble import RandomForestClassifier
ra=RandomForestClassifier()
ra.fit(x_train,y_train)
y_pred=ra.predict(x_test)

#Decision Tree Classifier
from sklearn.tree import DecisionTreeClassifier
dc=DecisionTreeClassifier()
dc.fit(x_train,y_train)
y_p=dc.predict(x_test)

#Model evaluation Metrics
from sklearn.metrics import accuracy_score
from sklearn.metrics import precision_score
acc=accuracy_score(y_pred,y_test)
pc=precision_score(y_pred,y_test)
print("RandomForest Accuracy",acc*100)
print("RandomForest PrecisionScore",pc*100)
d_acc=accuracy_score(y_p,y_test)
d_pr=precision_score(y_p,y_test)
print("Decision Tree Accuracy", d_acc*100)
print("Decision Tree PrecisionScore",d_pr*100)