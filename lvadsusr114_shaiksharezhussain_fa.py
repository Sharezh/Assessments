# -*- coding: utf-8 -*-
"""LVADSUSR114-ShaikSharezHussain-FA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XgoGAsFkCmNEX-Tfk3JgDwaVsqx34WUu
"""

#1
import pandas as pd
import numpy as np
df=pd.read_excel('/content/Walmart_Dataset Python_Final_Assessment.xlsx')
df.describe()
df.info()
df.head()

#2
df.isnull()
df.fillna(df.mean())
df.drop_duplicates() #the drop_duplicates() cannot be used much for sales as there will be multiple products and the sales of all the entries are important

#3
import statistics as s
print("mean:",df['Sales'].mean()) #average sales for this store is the answer
print("Mode:",df['Quantity'].mode()) #The most repeated quantity bought is 3
print("Median",df['Order Date'].median())
print("Standard Deviation",df['Profit'].std())
print("Variance:",df['Sales'].var())

#4
import matplotlib.pyplot as plt
import seaborn as sns
a=[]
df1=pd.DataFrame(df.groupby('Category')['Sales'].sum())
df1.reset_index(inplace=False)
#Line Plot
df1['Sales'].plot(kind='line', figsize=(8, 4), title='Sales')
plt.gca().spines[['top', 'right']].set_visible(False)

#Scatter Plot
sns.scatterplot(data=df,x='Category',y='Sales')
#bar plot
sns.barplot(data=df,x='Category',y='Profit')

#Histogram
sns.histplot(data=df,x='Category',y='Sales',color="Orange")

#Plotting Sales Per Country Using Line Plot
df3['Sales'].plot(kind='line', figsize=(28, 4), title='Sales')
plt.gca().spines[['top', 'right']].set_visible(False)

#Plotting Based on date and Sales
def _plot_series(series, series_name, series_index=0):
  palette = list(sns.palettes.mpl_palette('Dark2'))
  xs = series['Order Date']
  ys = series['Sales']

  plt.plot(xs, ys, label=series_name, color=palette[series_index % len(palette)])

fig, ax = plt.subplots(figsize=(10, 5.2), layout='constrained')
df_sorted = df.sort_values('Order Date', ascending=True)
_plot_series(df_sorted, '')
sns.despine(fig=fig, ax=ax)
plt.xlabel('Order Date')
_ = plt.ylabel('Sales')

#5
class corr:
  def __init__(self,df):
    self.df=df
  def findcor(self,df):
    return self.df['Sales'].corr(self.df['Profit'])
  def salescor(self,df):
    return self.df['Sales'].corr(self.df['Quantity'])
obj=corr(df)
print(obj.findcor(df))
print(obj.salescor(df))
#The corelation between two variables that is The corelation between Sales and Profit

#6
sns.boxplot(data=df)
plt.title("Anomaly")
plt.show()

#7
#i.
plt.plot(df['Sales'])
plt.plot(df['Profit'])
plt.show()
#ii.
df1=pd.DataFrame(df.groupby('Category')['Sales'].sum().reset_index())
df2=df1.sort_values(by='Sales',ascending=False)
print(df2)
plt.bar(df2['Category'],df2['Sales'])
plt.figure(figsize=(20,8))

#i.
#Customer Anlysis
df2=pd.DataFrame(df.groupby('EmailID').agg({'EmailID':'count',"Sales":'sum'}).reset_index())
df1.sort_values(by="EmailID",ascending=False)
df1.head(5)

#ii.
df1=pd.DataFrame(df.groupby('Category')['Sales'].sum())
df1.reset_index(inplace=False)
df1['Sales'].plot(kind='line', figsize=(8, 4), title='Sales')
plt.gca().spines[['top', 'right']].set_visible(False)

#i.
#Comprehensive Analytics

#ii.
class corr:
  def __init__(self,df):
    self.df=df
  def findcor(self,df):
    return self.df['Sales'].corr(self.df['Profit'])
  def salescor(self,df):
    return self.df['Sales'].corr(self.df['Quantity'])
obj=corr(df)
print(obj.findcor(df))
print(obj.salescor(df))

#iii.
df2=pd.DataFrame(df.groupby('EmailID').agg({'EmailID':'count',"Sales":'sum'}))
df2
#high value customers are The one with most orders